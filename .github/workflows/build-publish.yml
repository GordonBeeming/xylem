name: üò± Build, Publish & Deploy

on:
  workflow_dispatch:
  push:
    branches: ["main", "preview", "copilot/*"]
    paths:
      - "data/**"
      - "public/**"
      - "src/**"
      - ".github/workflows/build-publish.yml"
      - "Dockerfile"
      - "next.config.mjs"
      - "package.json"
      - "config/redirects.mjs"
      - "contentlayer.config.ts"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: üèóÔ∏è Build & Push Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: "v2.2.4"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_GISCUS_REPO=${{ vars.NEXT_PUBLIC_GISCUS_REPO }}
            NEXT_PUBLIC_GISCUS_REPOSITORY_ID=${{ vars.NEXT_PUBLIC_GISCUS_REPOSITORY_ID }}
            NEXT_PUBLIC_GISCUS_CATEGORY=${{ vars.NEXT_PUBLIC_GISCUS_CATEGORY }}
            NEXT_PUBLIC_GISCUS_CATEGORY_ID=${{ vars.NEXT_PUBLIC_GISCUS_CATEGORY_ID }}

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  deploy-preview:
    name: üïµÔ∏è Deploy to Preview
    permissions: {}
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/preview' || startsWith(github.ref, 'refs/heads/copilot/')
    runs-on: self-hosted
    environment:
      name: preview
      url: https://preview.gordonbeeming.com

    steps:
      - name: Cleanup old Podman images
        run: |
          podman system prune -a -f --volumes

      - name: Deploy to preview environment
        run: |
          export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u)/bus"
          IMAGE_TAG=${{ needs.build.outputs.image_tag }}
          RAW_IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          IMAGE_NAME=$(echo "${RAW_IMAGE_NAME}" | tr '[:upper:]' '[:lower:]')
          SERVICE_FILE=~/.config/systemd/user/gordonbeeming-preview.service

          echo "--- Deploying image ${IMAGE_NAME}:${IMAGE_TAG} to preview ---"

          podman pull "${IMAGE_NAME}:${IMAGE_TAG}"

          # Replace the image tag in the pre-existing service file
          sed -i "s|ghcr.io/gordonbeeming/xylem:.*|${IMAGE_NAME}:${IMAGE_TAG}|" "${SERVICE_FILE}"

          systemctl --user daemon-reload
          systemctl --user restart gordonbeeming-preview.service

          echo "--- Preview deployment complete! ---"

  deploy-production:
    name: üöÄ Deploy to Production
    permissions: {}
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: self-hosted
    environment:
      name: production
      url: https://gordonbeeming.com

    steps:
      - name: Cleanup old Podman images
        run: |
          podman system prune -a -f --volumes

      - name: Deploy to production environment
        run: |
          export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u)/bus"
          IMAGE_TAG=${{ needs.build.outputs.image_tag }}
          RAW_IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          IMAGE_NAME=$(echo "${RAW_IMAGE_NAME}" | tr '[:upper:]' '[:lower:]')
          SERVICE_FILE=~/.config/systemd/user/gordonbeeming-production.service

          echo "--- Deploying image ${IMAGE_NAME}:${IMAGE_TAG} to production ---"

          podman pull "${IMAGE_NAME}:${IMAGE_TAG}"

          # Replace the image tag in the pre-existing service file
          sed -i "s|ghcr.io/gordonbeeming/xylem:.*|${IMAGE_NAME}:${IMAGE_TAG}|" "${SERVICE_FILE}"

          systemctl --user daemon-reload
          systemctl --user restart gordonbeeming-production.service

          echo "--- Production deployment complete! ---"
