
  <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>xylem | Gordon Beeming</title>
      <link>https://gordonbeeming.com/blog</link>
      <description>Gordon Beeming - Father • Husband • Triathlete • SSW Solution Architect</description>
      <language>en-us</language>
      <managingEditor>website@gordonbeeming.com (Gordon Beeming)</managingEditor>
      <webMaster>website@gordonbeeming.com (Gordon Beeming)</webMaster>
      <lastBuildDate>Thu, 25 Sep 2014 00:00:00 GMT</lastBuildDate>
      <atom:link href="https://gordonbeeming.com/tags/nuget/feed.xml" rel="self" type="application/rss+xml"/>
      
  <item>
    <guid>https://gordonbeeming.com/blog/2014-09-25/turning-on-local-cache-for-nuget</guid>
    <title>Turning &quot;on&quot; local cache for NuGet</title>
    <link>https://gordonbeeming.com/blog/2014-09-25/turning-on-local-cache-for-nuget</link>
    <description>My internet connection is slow or down quite a lot. One of the things Robert MacLean pointed out today in a presentation at a Microsoft Dev Day event today is that is that you can make use of the local cache from previous downloaded packages. Below is how to do this</description>
    <pubDate>Thu, 25 Sep 2014 00:00:00 GMT</pubDate>
    <author>website@gordonbeeming.com (Gordon Beeming)</author>
    <category>Visual Studio</category><category>NuGet</category>
  </item>

  <item>
    <guid>https://gordonbeeming.com/blog/2018-07-30/building-libraries-that-target-multiple-frameworks</guid>
    <title>Building libraries that target multiple frameworks</title>
    <link>https://gordonbeeming.com/blog/2018-07-30/building-libraries-that-target-multiple-frameworks</link>
    <description>I&#39;ve generally built libraries wrong by placing all binaries in the root and it&#39;s worked ok for now so why change it. I might also add that these libraries have been for internal use so no real reason for not doing this I guess.</description>
    <pubDate>Mon, 30 Jul 2018 00:00:00 GMT</pubDate>
    <author>website@gordonbeeming.com (Gordon Beeming)</author>
    <category>VSTS / TFS</category><category>nupkg</category><category>nuspec</category><category>NuGet</category>
  </item>

  <item>
    <guid>https://gordonbeeming.com/blog/2023-10-29/visual-studio-item-templates-vs-net-templates-in-2023</guid>
    <title>Visual Studio Item Templates vs .NET Templates in 2023</title>
    <link>https://gordonbeeming.com/blog/2023-10-29/visual-studio-item-templates-vs-net-templates-in-2023</link>
    <description>Long ago, one of the ways we&#39;d get some reuse out of standard and utility files would be by exporting item templates. Since the .NET CLI rolled around, the approach has been different and much easier. </description>
    <pubDate>Sun, 29 Oct 2023 00:00:00 GMT</pubDate>
    <author>website@gordonbeeming.com (Gordon Beeming)</author>
    <category>git</category><category>nuget.org</category><category>.NET</category><category>.NET CLI</category><category>.editorconfig</category><category>NuGet</category><category>dotnet</category><category>dotnet new</category>
  </item>

  <item>
    <guid>https://gordonbeeming.com/blog/2023-11-05/deploying-net-templates-using-github-actions</guid>
    <title>Deploying .NET templates using GitHub Actions</title>
    <link>https://gordonbeeming.com/blog/2023-11-05/deploying-net-templates-using-github-actions</link>
    <description>Once you&#39;ve created a .NET template, you should automate the updates of the package using GitHub actions to remove the effort required in publishing updates</description>
    <pubDate>Sun, 05 Nov 2023 00:00:00 GMT</pubDate>
    <author>website@gordonbeeming.com (Gordon Beeming)</author>
    <category>git</category><category>nuget.org</category><category>GitHub Actions</category><category>GitHub</category><category>.NET</category><category>.NET CLI</category><category>NuGet</category><category>dotnet</category><category>dotnet new</category>
  </item>

    </channel>
  </rss>
